swirl()
library(swirl)
swirl9
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10,)
LETTERS()
letters()
sample(LETTERS)
LETTERS
sample(LETTERS)
sample(100, c(0,1), replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(1, na.rm = TRUE)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sum(flips)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
load("C:/Users/FWarf/Desktop/Coursera/ProgrammingAssignment2/.RData")
View(plants)
class(plants)
ncol(plants)
class(plants)
list(plants)
nrow(plants, na.rm = FALSE)
str(plants)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(4,5))
n
rm(list(ls())
rm(list = ls())
rm(list = ls())
rm(list(ls())
rm(list = ls())
ls()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
}
cacheSolve(3,4)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
solve(3,4)
?solve
mean(c(1,2,3,4,5,6))
mean(c(1,2,3,4,5,6))
MyMean <- mean(c(1,2,3,4,5,6))
MyMean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
View(makeVector)
debug(makeVector)
MyVector <- makeVector(c(1,2,3,4,5,6))
MyVector
MyVector$get()
MyVector$set(c(1,3,5,7,9))
MyVector$get()
MyVector$set(c(1,2,3,4,5,6))
MyVector
MyVector$getmean()
MyVector$setmean()
MyVector$setmean(mean)
MyVector$getmean()
MyVector$setmean(3.5)
MyVector$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
debug(cachemean)
cachemean(MyVector)
MyVector$setmean(NULL)
MyVector$getmean()
cachemean(MyVector)
cachemean(MyVector)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
}
debug(makeCacheMatrix)
dataMatrix <- matrix(data=c(1,2,3,4), nrow = 2, ncol = 2)
dataMatrix
MyCachedMatrix <- makeCacheMatrix(dataMatrix)
debug(cacheSolve)
MyInverse <- cacheSolve(MyCachedMatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
MyInverse <- cacheSolve(MyCachedMatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
debug(cacheSolve)
MyInverse <- cacheSolve(MyCachedMatrix)
MyCachedMatrix$setmatrix(NULL)
MyInverse <- cacheSolve(MyCachedMatrix)
